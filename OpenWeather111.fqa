{"name":"OpenWeather provider","type":"com.fibaro.weather","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_270"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"OpenWeather widget","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"button1","style":{"weight":"1.2"},"text":"Refresh","type":"button"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"label2","style":{"weight":"1.2"},"text":"Click on buttons to select sensors:","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"button3_1","style":{"weight":"0.33"},"text":"TEMP [ ]","type":"button"},{"name":"button3_2","style":{"weight":"0.33"},"text":"WIND [ ]","type":"button"},{"name":"button3_3","style":{"weight":"0.33"},"text":"PRES [ ]","type":"button"}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"button3_4","style":{"weight":"0.33"},"text":"HUMI [ ]","type":"button"},{"name":"button3_5","style":{"weight":"0.33"},"text":"CLOU [ ]","type":"button"},{"name":"button3_6","style":{"weight":"0.33"},"text":"RAIN [ ]","type":"button"}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"button3_7","style":{"weight":"0.33"},"text":"UVI [ ]","type":"button"},{"name":"button3_8","style":{"weight":"0.33"},"text":"SUNR [ ]","type":"button"},{"name":"button3_9","style":{"weight":"0.33"},"text":"SUNS [ ]","type":"button"}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_270"}}},"uiCallbacks":[{"callback":"button1Event","eventType":"onReleased","name":"button1"},{"callback":"toggleMetric","eventType":"onReleased","name":"button3_1"},{"callback":"toggleMetric","eventType":"onReleased","name":"button3_2"},{"callback":"toggleMetric","eventType":"onReleased","name":"button3_3"},{"callback":"toggleMetric","eventType":"onReleased","name":"button3_4"},{"callback":"toggleMetric","eventType":"onReleased","name":"button3_5"},{"callback":"toggleMetric","eventType":"onReleased","name":"button3_6"},{"callback":"toggleMetric","eventType":"onReleased","name":"button3_7"},{"callback":"toggleMetric","eventType":"onReleased","name":"button3_8"},{"callback":"toggleMetric","eventType":"onReleased","name":"button3_9"}],"quickAppVariables":[{"name":"APIKEY","value":"-"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"--[[\nOpenWeather widget v 1.1.1\n@author ikubicki\n]]\n\nfunction QuickApp:onInit()\n    self:initializeProperties()\n    self:initializeChildren()\n    self:trace('')\n    self:trace(self.i18n:get('name'))\n    GUI:label2Render()\n    GUI:button3Render()\n    self:run()\nend\n\nfunction QuickApp:run()\n    self:pullOpenWeatherData()\n    if (self.interval > 0) then\n        fibaro.setTimeout(self.interval, function() self:run() end)\n    end\nend\n\nfunction QuickApp:button1Event()\n    self:run()\nend\n\nfunction QuickApp:pullOpenWeatherData()\n    if (string.len(self.apikey) < 4) then\n        return false\n    end\n    self.gui:button1Text('please-wait')\n    local callback1 = function (response)\n        local data = json.decode(response.data)\n        -- self:debug('today forecast', json.encode(data.daily[1]))\n        -- self:debug('tomorrow forecast', json.encode(data.daily[2]))\n        if data.cod and data.cod >= 400 then\n            self:error(data.message)\n            self.gui:label1Text(data.message)\n            self.gui:button1Text('retry')\n        else\n            self:updateProvider(data.current)\n            self:updateDevices(data.current)\n            self:updateSunInfo(data.daily[1])\n            self:updateViewElements()\n        end\n        \n    end\n    self.http:get('/onecall' .. self:getUrlQueryString(), callback1)\nend\n\nfunction QuickApp:updateViewElements()\n    self.gui:label1Text('last-update', os.date('%Y-%m-%d %H:%M:%S'))\n    self.gui:button1Text('refresh')\nend\n\nfunction QuickApp:updateProvider(data)\n    local weatherInfo = data.weather[1]\n    -- WEATHER PROVIDER\n    self:updateProperty(\"WeatherCondition\", string.lower(weatherInfo.main))\n    self:updateProperty(\"ConditionCode\", ConditionCodes:get(weatherInfo.id, weatherInfo.icon))\n    self:updateProperty(\"Temperature\", data.temp)\n    self:updateProperty(\"Humidity\", data.humidity)\n    self:updateProperty(\"Wind\", data.wind_speed * 3.6)\n    self:updateProperty(\"Pressure\", data.pressure)\nend\n\nfunction QuickApp:updateDevices(data)\n    -- TEMPERATURE\n    OWTemperature:get('temperature'):update({value = data.temp})\n    -- WIND\n    OWWind:get('wind'):update({value = data.wind_speed * 3.6, unit = 'km/h'})\n    -- PRESSURE\n    OWSensor:get('pressure'):update({value = data.pressure, unit = 'mbar'})\n    -- HUMIDITY\n    OWHumidity:get('humidity'):update({value = data.humidity, unit = '%'})\n    -- CLOUDS\n    OWSensor:get('clouds'):update({value = data.clouds, unit = '%'})\n    -- RAIN\n    local rain = OWRain:get('rain'):update({value = OWRain:extractValue(data.rain), unit = 'mm'})\n    -- UVI\n    if data.uvi ~= nil then\n        OWSensor:get('uv'):update(data.uvi)\n    elseif Toggles:get('uv') then\n        local uviCallback = function (response)\n            local data = json.decode(response.data)\n            OWSensor:get('uv'):update(data.uvi)\n        end\n        self.http:get('/uvi' .. self:getUrlQueryString(), uviCallback)\n    end\nend\n\nfunction QuickApp:updateSunInfo(data)\n    -- SUNRISE\n    OWSensor:get('sunrise'):update(tonumber(os.date('%H.%M', data.sunrise)))\n    -- SUNSET\n    OWSensor:get('sunset'):update(tonumber(os.date('%H.%M', data.sunset)))\nend\n\nfunction QuickApp:toggleMetric(e)\n    if e.elementName == 'button3_1' then Toggles:toggle('temperature') end\n    if e.elementName == 'button3_2' then Toggles:toggle('wind') end\n    if e.elementName == 'button3_3' then Toggles:toggle('pressure') end\n    if e.elementName == 'button3_4' then Toggles:toggle('humidity') end\n    if e.elementName == 'button3_5' then Toggles:toggle('clouds') end\n    if e.elementName == 'button3_6' then Toggles:toggle('rain') end\n    if e.elementName == 'button3_7' then Toggles:toggle('uv') end\n    if e.elementName == 'button3_8' then Toggles:toggle('sunrise') end\n    if e.elementName == 'button3_9' then Toggles:toggle('sunset') end\n    GUI:button3Render()\n    GUI:button1Text('refresh-sensors')\nend\n\nfunction QuickApp:getUrlQueryString()\n    local string = '?appid=' .. self.apikey\n    string = string .. '&lat=' .. self.latitude\n    string = string .. '&lon=' .. self.longitude\n    string = string .. '&units=metric'\n    string = string .. '&lang=pl'\n    string = string .. '&exclude=minutely,hourly'\n    return string\nend\n\nfunction QuickApp:initializeProperties()\n    local locationInfo = api.get('/settings/location')\n    self.latitude = locationInfo.latitude\n    self.longitude = locationInfo.longitude\n    self.apikey = self:getVariable(\"APIKEY\")\n    self.interval = 1\n\n    QuickApp.toggles = Toggles:new()\n    QuickApp.i18n = i18n:new(api.get(\"/settings/info\").defaultLanguage)\n    QuickApp.gui = GUI:new(self, QuickApp.i18n)\n    QuickApp.builder = DeviceBuilder:new(self)\n    QuickApp.http = HTTPClient:new({\n        baseUrl = 'https://api.openweathermap.org/data/2.5'\n    })\n\n    self:updateProperty('manufacturer', 'OpenWeather')\n    self:updateProperty('model', 'Weather provider')\n\n    -- hours to miliseconds conversion\n    self.interval = self:hoursToMiliseconds(self.interval)\nend\n\nfunction QuickApp:hoursToMiliseconds(hours)\n    return hours * 3600000\nend\n\nfunction QuickApp:initializeChildren()\n    self.builder:initChildren({\n        [OWSensor.class] = OWSensor,\n        [OWTemperature.class] = OWTemperature,\n        [OWWind.class] = OWWind,\n        [OWHumidity.class] = OWHumidity,\n        [OWRain.class] = OWRain,\n    })\nend"},{"name":"HTTPClient","isMain":false,"isOpen":false,"content":"\r\n--[[\r\nHTTPClient wrapper\r\n@author ikubicki\r\n]]\r\nclass 'HTTPClient'\r\n\r\nfunction HTTPClient:new(options)\r\n    if not options then\r\n        options = {}\r\n    end\r\n    self.options = options\r\n    return self\r\nend\r\n\r\nfunction HTTPClient:get(url, success, error)\r\n    local client = net.HTTPClient({timeout=10000})\r\n    client:request(self:url(url), self:requestOptions(success, error, 'GET')) \r\nend\r\n\r\nfunction HTTPClient:post(url, data, success, error)\r\n    local client = net.HTTPClient({timeout=10000})\r\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data)) \r\nend\r\n\r\nfunction HTTPClient:put(url, data, success, error)\r\n    local client = net.HTTPClient({timeout=10000})\r\n    client:request(self:url(url), self:requestOptions(success, error, 'PUT', data)) \r\nend\r\n\r\nfunction HTTPClient:delete(url, success, error)\r\n    local client = net.HTTPClient({timeout=10000})\r\n    client:request(self:url(url), self:requestOptions(success, error, 'DELETE')) \r\nend\r\n\r\nfunction HTTPClient:url(url)\r\n    if (string.sub(url, 0, 4) == 'http') then\r\n        return url\r\n    end\r\n    if not self.options.baseUrl then\r\n        self.options.baseUrl = 'http://localhost'\r\n    end\r\n    return self.options.baseUrl .. tostring(url)\r\nend\r\n\r\nfunction HTTPClient:requestOptions(success, error, method, data)\r\n    if (error == nil) then\r\n        error = function (error)\r\n            QuickApp:error(json.encode(error))\r\n        end\r\n    end\r\n    if (method == nil) then\r\n        method = 'GET'\r\n    end\r\n    local options = {\r\n        checkCertificate = false,\r\n        method = method\r\n    }\r\n    if (data ~= nil) then\r\n        options.data = data\r\n    end\r\n    return {\r\n        options = options,\r\n        success = success,\r\n        error = error\r\n    }\r\nend"},{"name":"DeviceBuilder","isMain":false,"isOpen":false,"content":"--[[\r\nDevice building utility\r\n@author ikubicki\r\n]]\r\n\r\nclass 'DeviceBuilder'\r\n\r\nfunction DeviceBuilder:new(parentDevice)\r\n    self.parentDevice = parentDevice\r\n    self.parentRoomId = api.get('/devices/' .. parentDevice.id).roomID\r\n    self.classMap = {}\r\n    self.devicesMap = {}\r\n    return self\r\nend\r\n\r\nfunction DeviceBuilder:initChildren(classMap)\r\n    self.classMap = classMap\r\n    self.parentDevice:initChildDevices(classMap)\r\n    for id, device in pairs(self.parentDevice.childDevices) do\r\n        local vars = {}\r\n        for _, var in pairs(device.properties.quickAppVariables) do\r\n            vars[var.name] = var.value\r\n        end\r\n        if vars.name then\r\n            self.devicesMap[vars.name] = device.id\r\n        end\r\n    end\r\nend\r\n\r\nfunction DeviceBuilder:updateChild(name, displayName, type, properties)\r\n    local child = self:getChildByName(name)\r\n    if not child then\r\n        child = self:createChild(name, displayName, type, properties)\r\n    end\r\n    \r\n    if properties ~= nil then\r\n        api.put('/devices/' .. child.id, {name = displayName, properties = properties})\r\n        -- QuickApp:trace('Device updated: ' .. child.name .. ' [' .. child.id .. ']')\r\n    end\r\n    return child\r\nend\r\n\r\nfunction DeviceBuilder:getChildByName(name)\r\n--    QuickApp:debug(json.encode(self.devicesMap))\r\n    local id = self.devicesMap[name]\r\n    if id then\r\n        return self:getChild(id)\r\n    end\r\n    return nil\r\nend\r\n\r\nfunction DeviceBuilder:getChild(id)\r\n    return self.parentDevice.childDevices[id]\r\nend\r\n\r\nfunction DeviceBuilder:createChild(name, displayName, type, properties)\r\n    local options = {\r\n        name = displayName,\r\n        type = type\r\n    }\r\n    local child = self.parentDevice:createChildDevice(options, self.classMap[type])\r\n    if properties == nil then\r\n        properties = {}\r\n    end\r\n    properties.quickAppVariables = {{\r\n        name = 'name',\r\n        value = name\r\n    }}\r\n    QuickApp:trace('New device added: ' .. child.name .. ' [' .. child.id .. ']')\r\n    api.put('/devices/' .. child.id, {roomID = self.parentRoomId, properties = properties})\r\n    self.devicesMap[name] = child.id\r\n    return self:getChild(child.id)\r\nend\r\n\r\nfunction DeviceBuilder:deleteChild(name)\r\n    local child = self:getChildByName(name)\r\n    if child ~= nil then\r\n        api.delete('/devices/' .. child.id)\r\n        QuickApp:trace('Device removed: ' .. child.name .. ' [' .. child.id .. ']')\r\n    end\r\nend"},{"name":"Globals","isMain":false,"isOpen":false,"content":"--[[\r\nGlobal variables handler\r\n@author ikubicki\r\n]]\r\nclass 'Globals'\r\n\r\nfunction Globals:get(name, alternative)\r\n    local response = api.get('/globalVariables/' .. name)\r\n    if response then\r\n        local char = string.sub(response.value, 1, 1)\r\n        if char == '{' or char == '\"' then\r\n            return json.decode(response.value)\r\n        end\r\n        return response.value\r\n    end\r\n    return alternative\r\nend\r\n\r\nfunction Globals:set(name, value)\r\n    local response = api.put('/globalVariables/' .. name, {\r\n        name = name,\r\n        value = json.encode(value)\r\n    })\r\n    if not response then\r\n        response = api.post('/globalVariables', {\r\n            name = name,\r\n            value = json.encode(value)\r\n        })\r\n        \r\n    end\r\n    if response ~= nil then\r\n        if response.type == 'ERROR' then\r\n            QuickApp:error('GLOBALS ERROR[' .. response.reason .. ']:', response.message)\r\n        end\r\n    end\r\nend"},{"name":"i18n","isMain":false,"isOpen":false,"content":"--[[\r\nInternationalization tool\r\n@author ikubicki\r\n]]\r\nclass 'i18n'\r\n\r\nfunction i18n:new(langCode)\r\n    if not phrases[langCode] then\r\n        langCode = 'en'\r\n    end\r\n    self.phrases = phrases[langCode]\r\n    return self\r\nend\r\n\r\nfunction i18n:get(key)\r\n    if self.phrases[key] then\r\n        return self.phrases[key]\r\n    end\r\n    return key\r\nend\r\n"},{"name":"ConditionCodes","isMain":false,"isOpen":false,"content":"--[[\r\nCondition codes to translate OpenWeather weather info to Fibaro weather icon\r\nRead more https://openweathermap.org/weather-conditions#How-to-get-icon-URL\r\n\r\n@author ikubicki\r\n]]\r\nclass 'ConditionCodes'\r\n\r\nfunction ConditionCodes:get(id, icon)\r\n    local key = id .. string.sub(icon, 3)\r\n    return ConditionCodes.codes[key]\r\nend\r\n\r\nConditionCodes.codes = {\r\n    -- clear\r\n    [\"800d\"] = 32,\r\n    [\"800n\"] = 31,\r\n    -- clouds\r\n    [\"801d\"] = 28, [\"802d\"] = 28, [\"803d\"] = 26, [\"804d\"] = 26,\r\n    [\"801n\"] = 27, [\"802n\"] = 27, [\"803n\"] = 26, [\"804n\"] = 26,\r\n    -- atmosphere\r\n    [\"701d\"] = 20, [\"711d\"] = 20, [\"721d\"] = 20, [\"731d\"] = 2, [\"741d\"] = 20,\r\n    [\"751d\"] = 24, [\"761d\"] = 24, [\"762d\"] = 24, [\"771d\"] = 24, [\"781d\"] = 1,\r\n    [\"701n\"] = 20, [\"711n\"] = 20, [\"721n\"] = 20, [\"731n\"] = 2, [\"741n\"] = 20,\r\n    [\"751n\"] = 24, [\"761n\"] = 24, [\"762n\"] = 24, [\"771n\"] = 24, [\"781n\"] = 1,\r\n    -- snow\r\n    [\"600d\"] = 41,[\"601d\"] = 16, [\"602d\"] = 13, [\"611d\"] = 7, [\"612d\"] = 7, [\"613d\"] = 7,\r\n    [\"615d\"] = 7, [\"616d\"] = 7, [\"620d\"] = 7, [\"621d\"] = 7, [\"622d\"] = 7,\r\n    [\"600n\"] = 41, [\"601n\"] = 16, [\"602n\"] = 13, [\"611n\"] = 7, [\"612n\"] = 7, [\"613n\"] = 7, \r\n    [\"615n\"] = 7, [\"616n\"] = 7, [\"620n\"] = 7, [\"621n\"] = 7, [\"622n\"] = 7,\r\n    -- rain\r\n    [\"500d\"] = 11, [\"501d\"] = 11, [\"502d\"] = 11, [\"503d\"] = 11, [\"504d\"] = 11,\r\n    [\"511d\"] = 7, [\"520d\"] = 11, [\"521d\"] = 11, [\"522d\"] = 11, [\"531d\"] = 11,\r\n    [\"500n\"] = 11, [\"501n\"] = 11, [\"502n\"] = 11, [\"503n\"] = 11, [\"504n\"] = 11,\r\n    [\"511n\"] = 7, [\"520n\"] = 11, [\"521n\"] = 11, [\"522n\"] = 11, [\"531n\"] = 11,\r\n    -- drizzle\r\n    [\"300d\"] = 9, [\"301d\"] = 9, [\"302d\"] = 9, [\"310d\"] = 9, [\"311d\"] = 9,\r\n    [\"312d\"] = 9, [\"313d\"] = 9, [\"314d\"] = 9, [\"321d\"] = 9,\r\n    [\"300n\"] = 9, [\"301n\"] = 9, [\"302n\"] = 9, [\"310n\"] = 9, [\"311n\"] = 9,\r\n    [\"312n\"] = 9, [\"313n\"] = 9, [\"314n\"] = 9, [\"321n\"] = 9,\r\n    -- thunderstorm\r\n    [\"200d\"] = 6, [\"201d\"] = 6, [\"202d\"] = 6, [\"210d\"] = 4, [\"211d\"] = 4,\r\n    [\"212d\"] = 37, [\"221d\"] = 37, [\"230d\"] = 35, [\"231d\"] = 35, [\"232d\"] = 35,\r\n    [\"200n\"] = 6, [\"201n\"] = 6, [\"202n\"] = 6, [\"210n\"] = 4, [\"211n\"] = 4, \r\n    [\"212n\"] = 37, [\"221n\"] = 37, [\"230n\"] = 35, [\"231n\"] = 35, [\"232n\"] = 35,\r\n}\r\n"},{"name":"GUI","isMain":false,"isOpen":false,"content":"--[[\r\nGUI utility\r\n@author ikubicki\r\n]]\r\n\r\nclass 'GUI'\r\n\r\nfunction GUI:new(app, i18n)\r\n    self.app = app\r\n    self.i18n = i18n\r\n    return self\r\nend\r\n\r\nfunction GUI:button1Text(text)\r\n    self.app:updateView(\"button1\", \"text\", self.i18n:get(text))\r\nend\r\n\r\nfunction GUI:label1Text(text, value1)\r\n    if value1 == nil then value1 = 'N/A' end\r\n    self.app:updateView(\"label1\", \"text\", string.format(self.i18n:get(text), value1))\r\nend\r\n\r\nfunction GUI:label2Render()\r\n    self.app:updateView(\"label2\", \"text\", self.i18n:get('select-sensors'))\r\nend\r\n\r\nfunction GUI:button3Render()\r\n    self.app:updateView('button3_1', 'text', string.format('[%s] ' .. self.i18n:get('openweather-temperature'), self:check(Toggles:get('temperature'))))\r\n    self.app:updateView('button3_2', 'text', string.format('[%s] ' .. self.i18n:get('openweather-wind'), self:check(Toggles:get('wind'))))\r\n    self.app:updateView('button3_3', 'text', string.format('[%s] ' .. self.i18n:get('openweather-pressure'), self:check(Toggles:get('pressure'))))\r\n    self.app:updateView('button3_4', 'text', string.format('[%s] ' .. self.i18n:get('openweather-humidity'), self:check(Toggles:get('humidity'))))\r\n    self.app:updateView('button3_5', 'text', string.format('[%s] ' .. self.i18n:get('openweather-clouds'), self:check(Toggles:get('clouds'))))\r\n    self.app:updateView('button3_6', 'text', string.format('[%s] ' .. self.i18n:get('openweather-rain'), self:check(Toggles:get('rain'))))\r\n    self.app:updateView('button3_7', 'text', string.format('[%s] ' .. self.i18n:get('openweather-uv'), self:check(Toggles:get('uv'))))\r\n    self.app:updateView('button3_8', 'text', string.format('[%s] ' .. self.i18n:get('openweather-sunrise'), self:check(Toggles:get('sunrise'))))\r\n    self.app:updateView('button3_9', 'text', string.format('[%s] ' .. self.i18n:get('openweather-sunset'), self:check(Toggles:get('sunset'))))\r\n\r\nend\r\n\r\nfunction GUI:check(checked)\r\n    if checked then return 'x' else return ' ' end\r\nend"},{"name":"OWSensor","isMain":false,"isOpen":false,"content":"class 'OWSensor' (QuickAppChild)\r\n\r\nOWSensor.class = 'com.fibaro.multilevelSensor'\r\n\r\nfunction OWSensor:__init(device)\r\n    self.device = false\r\n    QuickAppChild.__init(self, device)\r\nend\r\n\r\nfunction OWSensor:get(name, class)\r\n    if Toggles:get(name) then\r\n        if not class then\r\n            class = self.class\r\n        end\r\n        local id = 'openweather-' .. name\r\n        local label = QuickApp.i18n:get(id)\r\n        local options = {\r\n            manufacturer = 'OpenWeather',\r\n            model = name:sub(1, 1):upper() .. name:sub(2) .. ' sensor'\r\n        }\r\n        self.device = QuickApp.builder:updateChild(id, label, class, options)\r\n    else\r\n        self:delete(name)\r\n        self.device = false\r\n    end\r\n    return self\r\nend\r\n\r\nfunction OWSensor:delete(name)\r\n    if not Toggles:get(name) then\r\n        -- QuickApp:debug('Deleting ', name)\r\n        QuickApp.builder:deleteChild('openweather-' .. name)\r\n    end\r\nend\r\n\r\nfunction OWSensor:update(properties)\r\n    \r\n    if self.device == nil or not self.device then\r\n        return false\r\n    end\r\n    if type(properties) ~= 'table' then\r\n        properties = {\r\n            value = properties\r\n        }\r\n    end\r\n    for name, value in pairs(properties) do\r\n        self.device:updateProperty(name, value)\r\n    end\r\n    QuickApp:trace(string.format(QuickApp.i18n:get('device-updated'), self.device.name))\r\n    return true\r\nend"},{"name":"OWTemperature","isMain":false,"isOpen":false,"content":"class 'OWTemperature' (OWSensor)\r\n\r\nOWTemperature.class = 'com.fibaro.temperatureSensor'\r\n\r\nfunction OWTemperature:__init(device)\r\n    QuickAppChild.__init(self, device)\r\nend"},{"name":"OWWind","isMain":false,"isOpen":false,"content":"class 'OWWind' (OWSensor)\r\n\r\nOWWind.class = 'com.fibaro.windSensor'\r\n\r\nfunction OWWind:__init(device)\r\n    QuickAppChild.__init(self, device)\r\nend"},{"name":"OWHumidity","isMain":false,"isOpen":false,"content":"class 'OWHumidity' (OWSensor)\r\n\r\nOWHumidity.class = 'com.fibaro.humiditySensor'\r\n\r\nfunction OWHumidity:__init(device)\r\n    QuickAppChild.__init(self, device)\r\nend"},{"name":"OWRain","isMain":false,"isOpen":false,"content":"class 'OWRain' (OWSensor)\r\n\r\nOWRain.class = 'com.fibaro.rainSensor'\r\n\r\nfunction OWRain:__init(device)\r\n    QuickAppChild.__init(self, device)\r\nend\r\n\r\nfunction OWRain:get(name)\r\n    return OWSensor:get(name, self.class)\r\nend\r\n\r\nfunction OWRain:extractValue(data)\r\n    if data == nil then\r\n        data = {\r\n            ['1h'] = 0\r\n        }\r\n    end\r\n    return data\r\nend"},{"name":"Toggles","isMain":false,"isOpen":false,"content":"class 'Toggles'\r\n\r\nfunction Toggles:new()\r\n    self:load()\r\n    return self\r\nend\r\n\r\nfunction Toggles:get(name)\r\n    return self[name]\r\nend\r\n\r\nfunction Toggles:toggle(name)\r\n    self[name] = not self[name]\r\n    self:save()\r\nend\r\n\r\nfunction Toggles:load()\r\n    local toggles = Globals:get('openweather_toggles', self.defaults)\r\n    self.temperature = toggles.t\r\n    self.wind = toggles.w\r\n    self.pressure = toggles.p\r\n    self.humidity = toggles.h\r\n    self.clouds = toggles.c\r\n    self.rain = toggles.r\r\n    self.uv = toggles.u\r\n    self.sunrise = toggles.sr\r\n    self.sunset = toggles.ss\r\nend\r\n\r\nfunction Toggles:save()\r\n    Globals:set('openweather_toggles', {\r\n        t = self.temperature,\r\n        w = self.wind,\r\n        p = self.pressure,\r\n        h = self.humidity,\r\n        c = self.clouds,\r\n        r = self.rain,\r\n        u = self.uv,\r\n        sr = self.sunrise,\r\n        ss = self.sunset,\r\n    })\r\nend\r\n\r\nToggles.defaults = {\r\n    t = false,\r\n    w = false,\r\n    p = false,\r\n    h = false,\r\n    c = false,\r\n    r = false,\r\n    u = false,\r\n    sr = false,\r\n    ss = false,\r\n}"},{"name":"phrases","isMain":false,"isOpen":false,"content":"--[[\r\nTranslation phrases\r\n@author ikubicki\r\n]]\r\nphrases = {\r\n    pl = {\r\n        ['name'] = 'Stacja pogodowa OpenWeather',\r\n        ['refresh'] = 'Odśwież',\r\n        ['refresh-sensors'] = 'Odśwież sensory',\r\n        ['retry'] = 'Ponów',\r\n        ['last-update'] = 'Ostatnia aktualizacja: %s',\r\n        ['please-wait'] = 'Proszę czekać...',\r\n        ['device-updated'] = 'Zaktualizowano %s',\r\n        ['select-sensors'] = 'Kliknij w przyciski aby wybrać sensory:',\r\n        [\"openweather-provider\"] = \"Stacja OpenWeather\",\r\n        [\"openweather-temperature\"] = \"Temperatura\",\r\n        [\"openweather-pressure\"] = \"Ciśnienie\",\r\n        [\"openweather-humidity\"] = \"Wilgotność\",\r\n        [\"openweather-wind\"] = \"Wiatr\",\r\n        [\"openweather-rain\"] = \"Opady\",\r\n        [\"openweather-clouds\"] = \"Zachmurzenie\",\r\n        [\"openweather-sunrise\"] = \"Wschód słońca\",\r\n        [\"openweather-sunset\"] = \"Zachód słońca\",\r\n        [\"openweather-uv\"] = \"Indeks UV\",\r\n    },\r\n    en = {\r\n        ['name'] = 'OpenWeather weather station',\r\n        ['refresh'] = 'Refresh',\r\n        ['refresh-sensors'] = 'Refresh sensors',\r\n        ['retry'] = 'Retry',\r\n        ['last-update'] = 'Last update at %s',\r\n        ['please-wait'] = 'Please wait...',\r\n        ['device-updated'] = '%s updated',\r\n        ['select-sensors'] = 'Click on buttons to select sensors:',\r\n        [\"openweather-provider\"] = \"OpenWeather station\",\r\n        [\"openweather-temperature\"] = \"Temperature\",\r\n        [\"openweather-pressure\"] = \"Pressure\",\r\n        [\"openweather-humidity\"] = \"Humidity\",\r\n        [\"openweather-wind\"] = \"Wind\",\r\n        [\"openweather-rain\"] = \"Rain\",\r\n        [\"openweather-clouds\"] = \"Clouds\",\r\n        [\"openweather-sunrise\"] = \"Sunrise\",\r\n        [\"openweather-sunset\"] = \"Sunset\",\r\n        [\"openweather-uv\"] = \"UV Index\",\r\n    },\r\n    de = {\r\n        ['name'] = 'OpenWeather wetterstation',\r\n        ['refresh'] = 'Aktualisieren',\r\n        ['refresh-sensors'] = 'Sensoren aktualisieren',\r\n        ['retry'] = 'Wiederholen',\r\n        ['last-update'] = 'Letztes update: %s',\r\n        ['please-wait'] = 'Ein moment bitte...',\r\n        ['device-updated'] = '%s aktualisiert',\r\n        ['select-sensors'] = 'Klicken Sie auf die Schaltflächen, um Sensoren auszuwählen:',\r\n        [\"openweather-provider\"] = \"OpenWeather station\",\r\n        [\"openweather-temperature\"] = \"Temperatur\",\r\n        [\"openweather-pressure\"] = \"Luftdruck\",\r\n        [\"openweather-humidity\"] = \"Luftfeuchtigkeit\",\r\n        [\"openweather-wind\"] = \"Windgeschwindigkeit\",\r\n        [\"openweather-rain\"] = \"Regenfall\",\r\n        [\"openweather-clouds\"] = \"Wolkig\",\r\n        [\"openweather-sunrise\"] = \"Sonnenaufgang\",\r\n        [\"openweather-sunset\"] = \"Sonnenuntergang\",\r\n        [\"openweather-uv\"] = \"UV-Index\",\r\n    },\r\n    sv = {\r\n        ['name'] = 'OpenWeather väderstation',\r\n        ['refresh'] = 'Uppdatera',\r\n        ['refresh-sensors'] = 'Uppdatera sensorer',\r\n        ['retry'] = 'Försök igen',\r\n        ['last-update'] = 'Senaste uppdatering %s',\r\n        ['please-wait'] = 'Vänligen vänta...',\r\n        ['device-updated'] = '%s uppdaterad',\r\n        ['select-sensors'] = 'Klicka på knapparna för att välja sensorer:',\r\n        [\"openweather-provider\"] = \"OpenWeather station\",\r\n        [\"openweather-temperature\"] = \"Temperatur\",\r\n        [\"openweather-pressure\"] = \"Lufttryck\",\r\n        [\"openweather-humidity\"] = \"Fuktighet\",\r\n        [\"openweather-wind\"] = \"Vind\",\r\n        [\"openweather-rain\"] = \"Regn\",\r\n        [\"openweather-clouds\"] = \"Moln\",\r\n        [\"openweather-sunrise\"] = \"Soluppgång\",\r\n        [\"openweather-sunset\"] = \"Solnedgång\",\r\n        [\"openweather-uv\"] = \"UV-Index\",\r\n    }\r\n}"}]}