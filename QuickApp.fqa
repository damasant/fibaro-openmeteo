{"name":"OpenWeather widget","type":"com.fibaro.deviceController","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_188"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"OpenWeather widget","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"button1","style":{"weight":"1.2"},"text":"Odśwież","type":"button"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_188"}}},"uiCallbacks":[{"callback":"button1Event","eventType":"onReleased","name":"button1"}],"quickAppVariables":[{"name":"APIKEY","value":"-"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"--[[\nOpenWeather widget\n@author ikubicki\n]]\n\nfunction QuickApp:onInit()\n    self:debug(\"QuickApp:onInit\")\n    self:initializeProperties()\n    self:initializeChildren()\n    self:run()\nend\n\nfunction QuickApp:run()\n    self:pullOpenWeatherData()\n    if (self.interval > 0) then\n        fibaro.setTimeout(self.interval, function() self:run() end)\n    end\nend\n\nfunction QuickApp:button1Event()\n    self:run()\nend\n\nfunction QuickApp:pullOpenWeatherData()\n    if (string.len(self.apikey) < 3) then\n        return false\n    end\n    self.gui:button1Text('please-wait')\n    local callback1 = function (response)\n        local data = json.decode(response.data)\n        -- self:debug('today forecast', json.encode(data.daily[1]))\n        -- self:debug('tomorrow forecast', json.encode(data.daily[2]))\n        self:updateProvider(data.current)\n        self:updateSunInfo(data.daily[1])\n        self:updateViewElements()\n    end\n    self.http:get('/onecall' .. self:getUrlQueryString(), callback1)\nend\n\nfunction QuickApp:updateViewElements()\n    self.gui:label1Text('last-update', os.date('%Y-%m-%d %H:%M:%S'))\n    self.gui:button1Text('refresh')\nend\n\nfunction QuickApp:updateSunInfo(data)\n    -- SUNRISE\n    self.builder:updateChild('openweather-sunrise', self.i18n:get('openweather-sunrise'), 'com.fibaro.multilevelSensor', {\n        manufacturer = 'OpenWeather',\n        model = 'Sunrise',\n        value = tonumber(os.date('%H.%M', data.sunrise))\n    })\n    -- SUNSET\n    self.builder:updateChild('openweather-sunset', self.i18n:get('openweather-sunset'), 'com.fibaro.multilevelSensor', {\n        manufacturer = 'OpenWeather',\n        model = 'Sunset',\n        value = tonumber(os.date('%H.%M', data.sunset))\n    })\nend\n\nfunction QuickApp:updateProvider(data)\n    local weatherInfo = data.weather[1]\n    -- WEATHER PROVIDER\n    self.builder:updateChild('openweather-provider', self.i18n:get('openweather-provider'), 'com.fibaro.weather', {\n        manufacturer = 'OpenWeather',\n        model = 'Weather provider',\n        Wind = data.wind_speed * 3.6,\n        Humidity = data.humidity,\n        Temperature = data.temp,\n        WeatherCondition = string.lower(weatherInfo.main),\n        Pressure = data.pressure,\n        ConditionCode = ConditionCodes:get(weatherInfo.id, weatherInfo.icon)\n    })\n    -- TEMPERATURE\n    self.builder:updateChild('openweather-temp', self.i18n:get('openweather-temp'), 'com.fibaro.multilevelSensor', {\n        manufacturer = 'OpenWeather',\n        model = 'Temperature',\n        value = data.temp\n    })\n    -- WIND\n    self.builder:updateChild('openweather-wind', self.i18n:get('openweather-wind'), 'com.fibaro.multilevelSensor', {\n        manufacturer = 'OpenWeather',\n        model = 'Wind',\n        value = data.wind_speed * 3.6,\n        unit = 'km/h'\n    })\n    -- PRESSURE\n    self.builder:updateChild('openweather-pressure', self.i18n:get('openweather-pressure'), 'com.fibaro.multilevelSensor', {\n        manufacturer = 'OpenWeather',\n        model = 'Pressure',\n        value = data.pressure,\n        unit = 'mbar'\n    })\n    -- HUMIDITY\n    self.builder:updateChild('openweather-humidity', self.i18n:get('openweather-humidity'), 'com.fibaro.multilevelSensor', {\n        manufacturer = 'OpenWeather',\n        model = 'Humidity',\n        value = data.humidity,\n        unit = '%'\n    })\n    -- CLOUDS\n    self.builder:updateChild('openweather-clouds', self.i18n:get('openweather-clouds'), 'com.fibaro.multilevelSensor', {\n        manufacturer = 'OpenWeather',\n        model = 'Clouds',\n        value = data.clouds,\n        unit = '%'\n    })\n    -- RAIN\n    if data.rain == nil then\n        data.rain = {\n            ['1h'] = 0\n        }\n    end\n    self.builder:updateChild('openweather-rain', self.i18n:get('openweather-rain'), 'com.fibaro.multilevelSensor', {\n        manufacturer = 'OpenWeather',\n        model = 'Rain',\n        value = data.rain['1h'],\n        unit = 'mm'\n    })\n    -- UVI\n    if data.uvi ~= nil then\n        self.builder:updateChild('openweather-uvi', self.i18n:get('openweather-uvi'), 'com.fibaro.multilevelSensor', {\n            manufacturer = 'OpenWeather',\n            model = 'UVI',\n            value = data.uvi\n        })\n    else\n        local uviCallback = function (response)\n            local data = json.decode(response.data)\n            self.builder:updateChild('openweather-uvi', self.i18n:get('openweather-uvi'), 'com.fibaro.multilevelSensor', {\n                manufacturer = 'OpenWeather',\n                model = 'UVI',\n                value = data.value\n            })\n        end\n        self.http:get('/uvi' .. self:getUrlQueryString(), uviCallback)\n    end\nend\n\nfunction QuickApp:getUrlQueryString()\n    local string = '?appid=' .. self.apikey\n    string = string .. '&lat=' .. self.latitude\n    string = string .. '&lon=' .. self.longitude\n    string = string .. '&units=metric'\n    string = string .. '&lang=pl'\n    string = string .. '&exclude=minutely,hourly'\n    return string\nend\n\nfunction QuickApp:initializeProperties()\n    local locationInfo = api.get('/settings/location')\n    self.latitude = locationInfo.latitude\n    self.longitude = locationInfo.longitude\n    self.apikey = self:getVariable(\"APIKEY\")\n    self.interval = 1\n    \n    self.i18n = i18n:new(api.get(\"/settings/info\").defaultLanguage)\n    self.gui = GUI:new(self, self.i18n)\n    self.builder = DeviceBuilder:new(self)\n    self.http = HTTPClient:new({\n        baseUrl = 'https://api.openweathermap.org/data/2.5'\n    })\n\n    -- hours to miliseconds conversion\n    self.interval = self:hoursToMiliseconds(self.interval)\nend\n\nfunction QuickApp:hoursToMiliseconds(hours)\n    return hours * 3600000\nend\n\nfunction QuickApp:initializeChildren()\n    self.builder:initChildren({\n        [\"com.fibaro.weather\"] = OpenWeatherDevice,\n        [\"com.fibaro.multilevelSensor\"] = OpenWeatherSensor,\n    })\nend\n\nclass 'OpenWeatherDevice' (QuickAppChild)\nclass 'OpenWeatherSensor' (QuickAppChild)\n\nfunction OpenWeatherDevice:__init(device)\n    QuickAppChild.__init(self, device) \n    self:debug(\"OpenWeatherDevice init\")   \nend\n\nfunction OpenWeatherSensor:__init(device)\n    QuickAppChild.__init(self, device) \n    self:debug(\"OpenWeatherSensor init\")   \nend\n"},{"name":"HTTPClient","isMain":false,"isOpen":true,"content":"\r\n--[[\r\nHTTPClient wrapper\r\n@author ikubicki\r\n]]\r\nclass 'HTTPClient'\r\n\r\nfunction HTTPClient:new(options)\r\n    if not options then\r\n        options = {}\r\n    end\r\n    self.options = options\r\n    return self\r\nend\r\n\r\nfunction HTTPClient:get(url, success, error)\r\n    local client = net.HTTPClient({timeout=10000})\r\n    QuickApp:debug('GET', self:url(url))\r\n    client:request(self:url(url), self:requestOptions(success, error, 'GET')) \r\nend\r\n\r\nfunction HTTPClient:post(url, data, success, error)\r\n    local client = net.HTTPClient({timeout=10000})\r\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data)) \r\nend\r\n\r\nfunction HTTPClient:put(url, data, success, error)\r\n    local client = net.HTTPClient({timeout=10000})\r\n    client:request(self:url(url), self:requestOptions(success, error, 'PUT', data)) \r\nend\r\n\r\nfunction HTTPClient:delete(url, success, error)\r\n    local client = net.HTTPClient({timeout=10000})\r\n    client:request(self:url(url), self:requestOptions(success, error, 'DELETE')) \r\nend\r\n\r\nfunction HTTPClient:url(url)\r\n    if (string.sub(url, 0, 4) == 'http') then\r\n        return url\r\n    end\r\n    if not self.options.baseUrl then\r\n        self.options.baseUrl = 'http://localhost'\r\n    end\r\n    return self.options.baseUrl .. tostring(url)\r\nend\r\n\r\nfunction HTTPClient:requestOptions(success, error, method, data)\r\n    if (error == nil) then\r\n        error = function (error)\r\n            QuickApp:error(json.encode(error))\r\n        end\r\n    end\r\n    if (method == nil) then\r\n        method = 'GET'\r\n    end\r\n    local options = {\r\n        checkCertificate = false,\r\n        method = method\r\n    }\r\n    if (data ~= nil) then\r\n        options.data = data\r\n    end\r\n    return {\r\n        options = options,\r\n        success = success,\r\n        error = error\r\n    }\r\nend"},{"name":"DeviceBuilder","isMain":false,"isOpen":true,"content":"\r\n--[[\r\nDevice building utility\r\n@author ikubicki\r\n]]\r\n\r\nclass 'DeviceBuilder'\r\n\r\nfunction DeviceBuilder:new(parentDevice)\r\n    self.parentDevice = parentDevice\r\n    self.parentRoomId = api.get('/devices/' .. parentDevice.id).roomID\r\n    self.classMap = {}\r\n    self.devicesMap = {}\r\n    return self\r\nend\r\n\r\nfunction DeviceBuilder:initChildren(classMap)\r\n    self.classMap = classMap\r\n    self.parentDevice:initChildDevices(classMap)\r\n    for id, device in pairs(self.parentDevice.childDevices) do\r\n        local vars = {}\r\n        for _, var in pairs(device.properties.quickAppVariables) do\r\n            vars[var.name] = var.value\r\n        end\r\n        if vars.name then\r\n            self.devicesMap[vars.name] = device.id\r\n        end\r\n    end\r\nend\r\n\r\nfunction DeviceBuilder:updateChild(name, displayName, type, properties)\r\n    local child = self:getChildByName(name)\r\n    if not child then\r\n        child = self:createChild(name, displayName, type, properties)\r\n    end\r\n    \r\n    if properties ~= nil then\r\n        api.put('/devices/' .. child.id, {name = displayName, properties = properties})\r\n    end\r\n    QuickApp:trace('Device updated: ' .. child.name .. ' [' .. child.id .. ']')\r\n    return child\r\nend\r\n\r\nfunction DeviceBuilder:getChildByName(name)\r\n--    QuickApp:debug(json.encode(self.devicesMap))\r\n    local id = self.devicesMap[name]\r\n    if id then\r\n        return self:getChild(id)\r\n    end\r\n    return nil\r\nend\r\n\r\nfunction DeviceBuilder:getChild(id)\r\n    return self.parentDevice.childDevices[id]\r\nend\r\n\r\nfunction DeviceBuilder:createChild(name, displayName, type, properties)\r\n    local options = {\r\n        name = displayName,\r\n        type = type\r\n    }\r\n    local child = self.parentDevice:createChildDevice(options, self.classMap[type])\r\n    --local child = self:getChild(199)\r\n    if (properties == nil) then\r\n        properties = {}\r\n    end\r\n    properties.quickAppVariables = {{\r\n        name = 'name',\r\n        value = name\r\n    }}\r\n    QuickApp:trace('New device added: ' .. child.name .. ' [' .. child.id .. ']')\r\n    api.put('/devices/' .. child.id, {roomID = self.parentRoomId, properties = properties})\r\n    return self:getChild(child.id)\r\nend"},{"name":"Globals","isMain":false,"isOpen":true,"content":"\r\n--[[\r\nGlobal variables handler\r\n@author ikubicki\r\n]]\r\nclass 'Globals'\r\n\r\nfunction Globals:get(name, alternative)\r\n    local response = api.get('/globalVariables/' .. name)\r\n    if response then\r\n        if (string.sub(response.value, 1, 1) == '{') then\r\n            return json.decode(response.value)\r\n        end\r\n        return response.value\r\n    end\r\n    return alternative\r\nend\r\n\r\nfunction Globals:set(name, value)\r\n    local response = api.put('/globalVariables/' .. name, {\r\n        name = name,\r\n        value = json.encode(value)\r\n    })\r\n    if not response then\r\n        local response = api.post('/globalVariables', {\r\n            name = name,\r\n            value = json.encode(value)\r\n        })\r\n    end\r\nend"},{"name":"i18n","isMain":false,"isOpen":true,"content":"\r\n--[[\r\nInternationalization tool\r\n@author ikubicki\r\n]]\r\nclass 'i18n'\r\n\r\nfunction i18n:new(langCode)\r\n    self.phrases = phrases[langCode]\r\n    return self\r\nend\r\n\r\nfunction i18n:get(key)\r\n    if self.phrases[key] then\r\n        return self.phrases[key]\r\n    end\r\n    return key\r\nend\r\n\r\nphrases = {\r\n    pl = {\r\n        ['refresh'] = 'Odśwież',\r\n        ['last-update'] = 'Ostatnia aktualizacja: %s',\r\n        ['please-wait'] = 'Proszę czekać...',\r\n        [\"openweather-provider\"] = \"Stacja OpenWeather\",\r\n        [\"openweather-temp\"] = \"Temperatura\",\r\n        [\"openweather-pressure\"] = \"Ciśnienie\",\r\n        [\"openweather-humidity\"] = \"Wilgotność\",\r\n        [\"openweather-wind\"] = \"Wiatr\",\r\n        [\"openweather-rain\"] = \"Opady\",\r\n        [\"openweather-clouds\"] = \"Zachmurzenie\",\r\n        [\"openweather-sunrise\"] = \"Wschód słońca\",\r\n        [\"openweather-sunset\"] = \"Zachód słońca\",\r\n        [\"openweather-uvi\"] = \"Indeks UV\",\r\n    },\r\n    en = {\r\n        ['refresh'] = 'Refresh',\r\n        ['last-update'] = 'Last update at %s',\r\n        ['please-wait'] = 'Please wait...',\r\n        [\"openweather-provider\"] = \"OpenWeather station\",\r\n        [\"openweather-temp\"] = \"Temperature\",\r\n        [\"openweather-pressure\"] = \"Pressure\",\r\n        [\"openweather-humidity\"] = \"Humidity\",\r\n        [\"openweather-wind\"] = \"Wind\",\r\n        [\"openweather-rain\"] = \"Rain\",\r\n        [\"openweather-clouds\"] = \"Clouds\",\r\n        [\"openweather-sunrise\"] = \"Sunrise\",\r\n        [\"openweather-sunset\"] = \"Sunset\",\r\n        [\"openweather-uvi\"] = \"UV Index\",\r\n    },\r\n    de = {\r\n        ['refresh'] = 'Aktualisieren',\r\n        ['last-update'] = 'Letztes update: %s',\r\n        ['please-wait'] = 'Ein moment bitte...',\r\n        [\"openweather-provider\"] = \"OpenWeather station\",\r\n        [\"openweather-temp\"] = \"Temperatur\",\r\n        [\"openweather-pressure\"] = \"Luftdruck\",\r\n        [\"openweather-humidity\"] = \"Luftfeuchtigkeit\",\r\n        [\"openweather-wind\"] = \"Windgeschwindigkeit\",\r\n        [\"openweather-rain\"] = \"Regenfall\",\r\n        [\"openweather-clouds\"] = \"Wolkig\",\r\n        [\"openweather-sunrise\"] = \"Sonnenaufgang\",\r\n        [\"openweather-sunset\"] = \"Sonnenuntergang\",\r\n        [\"openweather-uvi\"] = \"UV-Index\",\r\n    }\r\n}"},{"name":"ConditionCodes","isMain":false,"isOpen":true,"content":"\r\n--[[\r\nCondition codes to translate OpenWeather weather info to Fibaro weather icon\r\nRead more https://openweathermap.org/weather-conditions#How-to-get-icon-URL\r\n\r\n@author ikubicki\r\n]]\r\nclass 'ConditionCodes'\r\n\r\nfunction ConditionCodes:get(id, icon)\r\n    local key = id .. string.sub(icon, 3)\r\n    return ConditionCodes.codes[key]\r\nend\r\n\r\nConditionCodes.codes = {\r\n    -- clear\r\n    [\"800d\"] = 32,\r\n    [\"800n\"] = 31,\r\n    -- clouds\r\n    [\"801d\"] = 28, [\"802d\"] = 28, [\"803d\"] = 26, [\"804d\"] = 26,\r\n    [\"801n\"] = 27, [\"802n\"] = 27, [\"803n\"] = 26, [\"804n\"] = 26,\r\n    -- atmosphere\r\n    [\"701d\"] = 20, [\"711d\"] = 20, [\"721d\"] = 20, [\"731d\"] = 2, [\"741d\"] = 20,\r\n    [\"751d\"] = 24, [\"761d\"] = 24, [\"762d\"] = 24, [\"771d\"] = 24, [\"781d\"] = 1,\r\n    [\"701n\"] = 20, [\"711n\"] = 20, [\"721n\"] = 20, [\"731n\"] = 2, [\"741n\"] = 20,\r\n    [\"751n\"] = 24, [\"761n\"] = 24, [\"762n\"] = 24, [\"771n\"] = 24, [\"781n\"] = 1,\r\n    -- snow\r\n    [\"600d\"] = 41,[\"601d\"] = 16, [\"602d\"] = 13, [\"611d\"] = 7, [\"612d\"] = 7, [\"613d\"] = 7,\r\n    [\"615d\"] = 7, [\"616d\"] = 7, [\"620d\"] = 7, [\"621d\"] = 7, [\"622d\"] = 7,\r\n    [\"600n\"] = 41, [\"601n\"] = 16, [\"602n\"] = 13, [\"611n\"] = 7, [\"612n\"] = 7, [\"613n\"] = 7, \r\n    [\"615n\"] = 7, [\"616n\"] = 7, [\"620n\"] = 7, [\"621n\"] = 7, [\"622n\"] = 7,\r\n    -- rain\r\n    [\"500d\"] = 11, [\"501d\"] = 11, [\"502d\"] = 11, [\"503d\"] = 11, [\"504d\"] = 11,\r\n    [\"511d\"] = 7, [\"520d\"] = 11, [\"521d\"] = 11, [\"522d\"] = 11, [\"531d\"] = 11,\r\n    [\"500n\"] = 11, [\"501n\"] = 11, [\"502n\"] = 11, [\"503n\"] = 11, [\"504n\"] = 11,\r\n    [\"511n\"] = 7, [\"520n\"] = 11, [\"521n\"] = 11, [\"522n\"] = 11, [\"531n\"] = 11,\r\n    -- drizzle\r\n    [\"300d\"] = 9, [\"301d\"] = 9, [\"302d\"] = 9, [\"310d\"] = 9, [\"311d\"] = 9,\r\n    [\"312d\"] = 9, [\"313d\"] = 9, [\"314d\"] = 9, [\"321d\"] = 9,\r\n    [\"300n\"] = 9, [\"301n\"] = 9, [\"302n\"] = 9, [\"310n\"] = 9, [\"311n\"] = 9,\r\n    [\"312n\"] = 9, [\"313n\"] = 9, [\"314n\"] = 9, [\"321n\"] = 9,\r\n    -- thunderstorm\r\n    [\"200d\"] = 6, [\"201d\"] = 6, [\"202d\"] = 6, [\"210d\"] = 4, [\"211d\"] = 4,\r\n    [\"212d\"] = 37, [\"221d\"] = 37, [\"230d\"] = 35, [\"231d\"] = 35, [\"232d\"] = 35,\r\n    [\"200n\"] = 6, [\"201n\"] = 6, [\"202n\"] = 6, [\"210n\"] = 4, [\"211n\"] = 4, \r\n    [\"212n\"] = 37, [\"221n\"] = 37, [\"230n\"] = 35, [\"231n\"] = 35, [\"232n\"] = 35,\r\n}\r\n--[[\r\nConditionCodes.fibaro = {\r\n    [\"1\"] = 'Tornado',\r\n    [\"2\"] = 'Hurricane',\r\n    [\"3\"] = 'Hurricane',\r\n    [\"4\"] = 'CloudStorm',\r\n    [\"5\"] = 'Storm',\r\n    [\"6\"] = 'CloudRainStorm',\r\n    [\"7\"] = 'CloudRainSnow',\r\n    [\"8\"] = 'CloudSnow4',\r\n    [\"9\"] = 'CloudHail',\r\n    [\"10\"] = 'CloudHailRain',\r\n    [\"11\"] = 'CloudRain',\r\n    [\"12\"] = 'CloudRain',\r\n    [\"13\"] = 'Snow10',\r\n    [\"14\"] = 'CloudSnow3',\r\n    [\"15\"] = 'Blizzard',\r\n    [\"16\"] = 'Snow3',\r\n    [\"17\"] = 'Snow3',\r\n    [\"18\"] = 'CloudStorm',\r\n    [\"19\"] = 'CloudRain',\r\n    [\"20\"] = 'Fog',\r\n    [\"21\"] = 'Fog',\r\n    [\"22\"] = 'Fog',\r\n    [\"23\"] = 'Wind',\r\n    [\"24\"] = 'Wind2',\r\n    [\"25\"] = 'Freeze',\r\n    [\"26\"] = 'Clouds',\r\n    [\"27\"] = 'CloudMoon',\r\n    [\"28\"] = 'CloudSun',\r\n    [\"29\"] = 'CloudMoon',\r\n    [\"30\"] = 'CloudSun',\r\n    [\"31\"] = 'Moon',\r\n    [\"32\"] = 'Sun',\r\n    [\"33\"] = 'MoonStars',\r\n    [\"34\"] = 'SunFog',\r\n    [\"35\"] = 'CloudSunStormRain',\r\n    [\"36\"] = 'Heat',\r\n    [\"37\"] = 'Storm',\r\n    [\"38\"] = 'CloudMoonStorm1',\r\n    [\"39\"] = 'CloudMoonStorm1',\r\n    [\"40\"] = 'CloudRain',\r\n    [\"41\"] = 'Snow',\r\n    [\"42\"] = 'Snow',\r\n    [\"43\"] = 'Snow',\r\n    [\"44\"] = 'Clouds',\r\n    [\"45\"] = 'CloudMoonStorm3',\r\n    [\"46\"] = 'CloudMoonStorm1',\r\n    [\"47\"] = 'CloudMoonStorm1',\r\n}\r\n]]"},{"name":"GUI","isMain":false,"isOpen":true,"content":"\r\n--[[\r\nGUI utility\r\n@author ikubicki\r\n]]\r\n\r\nclass 'GUI'\r\n\r\nfunction GUI:new(app, i18n)\r\n    self.app = app\r\n    self.i18n = i18n\r\n    QuickApp:debug(i18n)\r\n    return self\r\nend\r\n\r\nfunction GUI:button1Text(text)\r\n    self.app:updateView(\"button1\", \"text\", self.i18n:get(text))\r\nend\r\n\r\nfunction GUI:label1Text(text, value1)\r\n    if value1 == nil then value1 = 'N/A' end\r\n    self.app:updateView(\"label1\", \"text\", string.format(self.i18n:get(text), value1))\r\nend"}]}